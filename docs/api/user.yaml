openapi: "3.0"
info:
  title: BeeFog User API
  license:
    name: MIT
  version: "0.1"
  description: |-
    # Links
    - [Documentation](https://queenbee.netlify.app)
    - [Github](https://github.com/masschaos/queenbee)

    # Overview

    BeeFog User API can help you running your fog computing job easily.

    ## Authorization

    Work in progress

    ## Status Code

    In normal case, `HTTP Status Code` will beï¼š

    * `200` OK , Most frequently seen, except for the following.
    * `201` Created , After `POST` API created something.
    * `202` Accepted , Asynchronous API will always return the 202 .
    * `204` NoCountent , Request successed but the responese body is empty.

    If an exception is encountered, the possible `HTTP Status Code` will be:

    * `400` Bad `Query Param` or `Request Body` .
    * `401` Authentication failed. It will be 400 If you do not provide a token.
    * `403` You're authenticated, but you don't have privileges.
    * `404` Resource ID not found, empty list will be 200 ok.
    * `500` Unexpected server-side errors.

    ## Error Handling

    When you encounter an error, you get a status code and the following result:
    ```json
    {
      "error": "InvalidRegion",
      "message": "Please provide a valid region."
    }
    ```
    `error` is a `TitleCase` string, we will list all possible errors in API doc.
    You can use this string to control the worker's behavior.
    `message` is friendly to understanding.

    ## Rate Limit

    Work in progress


tags:
  - name: Job
    description: Manage job definition.
  - name: Run
    description: Run a job and query the result.
  - name: Worker
    description: Worker status summary.

paths:
  /workerbee/status:
    get:
      tags:
        - Worker
      summary: Status Summary
      description: |-
        Count of workers group by geo state,isp.
      operationId: worker-status
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/workerStatus"
        "500":
          description: ServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error500"
  /jobs/{id}:
    get:
      tags:
        - Job
      summary: Get a Job
      description: Get job by id.
      operationId: job-get-one
      parameters:
        - name: id
          in: path
          description: job id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/job"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error404"
        "500":
          description: ServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error500"
    put:
      tags:
        - Job
      summary: Update a Job
      description: |-
        Update a job definition, no steps included.
        You can change steps later.
      operationId: job-update
      parameters:
        - name: id
          in: path
          description: job id
          required: true
          schema:
            type: string
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/jobUpdate"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/job"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error404"
        "500":
          description: ServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error500"
    delete:
      tags:
        - Job
      summary: Delete a Job
      description: |-
        Delete a job definition, with everything connecting to it, such as triggers, runs, results etc.
      operationId: job-delete
      parameters:
        - name: id
          in: path
          description: job id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error404"
        "500":
          description: ServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error500"
  /jobs:
    get:
      tags:
        - Job
      summary: Get Jobs
      description: Get job list
      operationId: job-get-list
      # TODO: more query params
      parameters:
        - name: page
          in: query
          description: Page number, page size is 20 always.
          schema:
            type: integer
            format: int32
            default: 1
        - name: order
          in: query
          description: Order by created/run time, desc always.
          schema:
            type: string
            default: created
            example: run
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/run"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: ServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error500"
    post:
      tags:
        - Job
      summary: Create a Job
      description: |-
        Create a job definition, no steps included.
        You can init or change steps later.
      operationId: job-create
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/jobCreate"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/job"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: ServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error500"
  /runs:
    get:
      tags:
        - Run
      summary: Get Runs
      description: Get Job Run list
      operationId: run-get-list
      # TODO: more query params
      parameters:
        - name: page
          in: query
          description: Page number, page size is 20 always.
          schema:
            type: integer
            format: int32
            default: 1
        - name: jobID
          in: query
          description: Query runs for a job.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/run"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: ServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error500"
    post:
      tags:
        - Run
      summary: Invoke a Job
      description: |-
        Invoke a job, with the specified parameters and conditions.
      operationId: job-create
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/runInvoke"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/run"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: ServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error500"

# models
components:
  schemas:
    error:
      type: object
      properties:
        error:
          type: string
          description: TitleCase string, error type.
          required: true
          example: InvalidQueryParam
        message:
          type: string
          description: error message.
          required: true
          example: please provide correct query parameters.
    error404:
      type: object
      properties:
        error:
          type: string
          description: TitleCase string, error type.
          required: true
          example: NotFound
        message:
          type: string
          description: error message.
          required: true
          example: Record not found.
    error500:
      type: object
      properties:
        error:
          type: string
          description: TitleCase string, error type.
          required: true
          example: ServerError
        message:
          type: string
          description: error message.
          required: true
          example: Please contact your system administrator or submit an github issue report.
    token:
      type: object
      properties:
        token:
          type: string
          description: Auth token, 20-charactor string.
          required: true
          example: dbc7a5e0426985f7148a
        expiredAt:
          description: RFC 3339
          example: "2017-12-08T00:00:00.00Z"
          type: string
    # TODO: WIP
    jobCreate:
      type: object
      description: A job
      properties:
        name:
          type: string
          description: User defined job name.
          required: true
          example: "Hacker News crawler"
        timeLimit:
          type: integer
          format: int32
          description: job run time limit in worker (seconds)
          required: true
          default: 60
          example: 180
    jobUpdate:
      type: object
      description: A job
      properties:
        name:
          type: string
          description: User defined job name.
          required: true
          example: "Hacker News crawler"
        timeLimit:
          type: integer
          format: int32
          description: job run time limit in worker (seconds)
          required: true
          default: 60
          example: 180
    job:
      type: object
      description: A job definition
      properties:
        id:
          type: string
          description: ID is a 20-charactor string.
          required: true
          example: dbc7a5e0426985f7148b
        version:
          type: integer
          format: int32
          description: job version, start from 0, +1 after every change
          required: true
          example: 0
        timeLimit:
          type: integer
          format: int32
          description: job run time limit in worker (seconds)
          required: true
          example: 180
        steps:
          type: array
          description: all steps will run in worker
          items:
            type: object
            properties:
              id:
                type: string
                description: user defined id
                required: true
                example: step1
              name:
                type: string
                description: user defined name
                example: Visit homepage
              if:
                type: string
                description: if conditional to prevent a step from running unless a condition is met.
                example: "{{ success() }}"
              retryLimit:
                type: integer
                format: int32
                description: step retry times limit in worker
                example: 1
              timeLimit:
                type: integer
                format: int32
                description: step run time limit in worker (seconds)
                example: 60
              type:
                type: string
                description: step type
                example: chrome-visit
              content:
                type: object
                description: content structrue depends on step type
    # TODO: WIP
    runInvoke:
      type: object
      description: Data required for invoking a job.
      properties:
        jobID:
          type: string
          description: jobID is a 20-charactor string.
          required: true
          example: dbc7a5e0426985f7148b
    run:
      type: object
      description: A job run
      properties:
        id:
          type: string
          description: ID is a 20-charactor string.
          required: true
          example: dbc7a5e0426985f7148c
        jobID:
          type: string
          description: jobID is a 20-charactor string.
          required: true
          example: dbc7a5e0426985f7148b
    workerStatus:
      type: object
      description: Worker status summary
      properties:
        online:
          type: integer
          format: int32
          description: Total online workers.
          required: true
          example: 2046
